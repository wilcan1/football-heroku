{"version":3,"sources":["components/ListStade.js","components/Stade.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["ListStade","componentDidMount","fetch","then","response","json","data","console","log","setState","stades","render","stade","state","map","i","key","nom_stade","adresse_stade","cp_stade","type","onClick","props","history","push","id_stade","cellspacing","cellpadding","React","Component","Stade","className","id","Navigation","class","href","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uNA+CeA,E,kDA5CX,aAAc,IAAD,8BACT,gBAMJC,kBAAoB,WAChBC,MAAM,oBACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACDC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACC,OAASJ,QAdrB,EAkBbK,OAAS,WACL,IAAIC,EAAQ,EAAKC,MAAMH,OAAOI,KAAI,SAACR,EAAKS,GAAQ,OAAO,wBAAIC,IAAKD,GAC5D,4BAAKT,EAAKW,WACV,4BAAKX,EAAKY,eACV,4BAAKZ,EAAKa,UACV,4BAAI,4BAAQC,KAAK,SAASC,QAAS,kBAAI,EAAKC,MAAMC,QAAQC,KAAnB,uBAAwClB,EAAKmB,aAAhF,aACJ,4BAAI,4BAAQL,KAAK,SAASC,QAAS,kBAAI,EAAKC,MAAMC,QAAQC,KAAnB,uBAAwClB,EAAKmB,aAAhF,kBACR,OACG,2BAAOC,YAAY,IAAIC,YAAY,KAC/B,+BACI,4BACI,4CACA,gDACA,2CACA,wCACA,2CAGR,+BACKf,KAnCZ,EAAKC,MAAM,CACPH,OAAO,IAHF,E,UADOkB,IAAMC,W,OCATC,E,uKAIb,OACI,6BACI,yBAAKC,UAAU,OACX,0BAAMA,UAAU,cACZ,gDACA,+BACI,+BACI,4BACI,qCACA,uCACA,6CAGR,2BAAOC,GAAG,uB,GAjBHH,aCCdI,E,uKAEb,OACI,yBAAKF,UAAU,aACX,wBAAIG,MAAM,8BACN,wBAAIA,MAAM,YACN,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,eAEJ,wBAAID,MAAM,YACN,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,YAEJ,wBAAID,MAAM,YACN,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,iB,GAZgBN,a,MCgBzBO,MAVf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.5f599d63.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ListStade extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            stades:[]\r\n        }  \r\n    }\r\n\r\n    componentDidMount = () =>{\r\n        fetch(\"/read/allstadium\")\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n              console.log(data);\r\n              this.setState({stades : data});\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        let stade = this.state.stades.map((data,i) => { return <tr key={i}>\r\n            <td>{data.nom_stade}</td>\r\n            <td>{data.adresse_stade}</td>\r\n            <td>{data.cp_stade}</td>\r\n            <td><button type=\"button\" onClick={()=>this.props.history.push(`update/stade/${data.id_stade}`)}>Modifier</button></td>\r\n            <td><button type=\"button\" onClick={()=>this.props.history.push(`delete/stade/${data.id_stade}`)}>Supprimer</button></td></tr>});\r\n        return(\r\n           <table cellspacing=\"2\" cellpadding=\"5\">\r\n               <thead>\r\n                   <tr>\r\n                       <th>Nom du Stade</th>\r\n                       <th>Adresse du Stade</th>\r\n                       <th>Code Postal</th>\r\n                       <th>Modifier</th>\r\n                       <th>Supprimer</th>\r\n                   </tr>\r\n               </thead>\r\n               <tbody>\r\n                   {stade}\r\n               </tbody>\r\n           </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListStade;","import React, { Component } from 'react'\r\n\r\nexport default class Stade extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"App\">\r\n                    <main className=\"app-header\">\r\n                        <h1>Liste des stades</h1>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Stade</th>\r\n                                    <th>Adresse</th>\r\n                                    <th>Code Postal</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody id=\"ListeStade\"></tbody>\r\n                        </table>\r\n                    </main>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React ,{ Component } from 'react';\r\n\r\n\r\nexport default class Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <ul class=\"nav justify-content-center\">\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"#\">Ã‰quipes</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"#\">Joueurs</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"#\">Stades</a>\r\n                    </li>                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ListStade from './components/ListStade';\nimport Stade from \"./components/Stade\";\nimport Navigation from \"./components/Navigation\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Stade />\n      <ListStade />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}